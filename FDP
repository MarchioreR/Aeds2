#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#define MAX 40
//
typedef struct Carta
{
    int Naipe;
    int Numero;
    int Poder;
    int Codigo;
} Carta;
//
typedef struct Lista
{
    int fim;
    Carta vet[5];
} Lista;
//
typedef struct Jogador
{
    char Nome[20];
    Lista Mao;
    int Vidas;
    int RoundsV;
    int Pos;
    int Chance;
} Jogador;
//
typedef struct Fila
{
    int Inicio;
    int Fim;
    int Tamanho;
    Jogador Vet[8];
} Fila;
//
typedef struct Pilha
{
    Carta Vet[40];
    int Topo;
} Pilha;
//
Fila *CriarFila(); // A fila é usada para rotacionar os jogadores
int Enfileira(Fila *F, Jogador J);
int Desenfil(Fila *F, Jogador *Aux);
int FilaCh(Fila *F);
int FilaVaz(Fila *F);
//
Pilha *CriarPilha(); // O baralho do jogo é uma pilha
int PilhaVaz(Pilha *P);
int PilhaCh(Pilha *P, int Max);
int DesemPilha(Pilha *P, Carta *N);
int EmPilhaInicio(Pilha *P, int Naipe, int Numero, int Poder, int Codigo);
int EmpilhaCarta(Pilha *P, Carta X);
//
int RemoverPOS(Jogador *J, int N, int POS, Carta *X, int Ind); // Remover uma carta da mão
int ListaVAZ(Lista L);
//
int QtdDeJgdr();                                                                                 // Obtem a quantidade de jogadores
void CriarJogador(Jogador F[], int N, int POS);                                                  // Cria os jogadores
void CriarBaralho(Pilha *P);                                                                     // Cria as 40 cartas e as empilha no baralho
void Embaralhar(Pilha *P);                                                                       // Embaralha
void CriarMao(Pilha *P, Jogador *J, int QtdJog, int NumCartas, int POS);                         // Função que está dentro da "MaosBets" que entrega as cartas para um jogador
void MaosBets(Pilha *Baralho, Jogador *J, int N, int Turno, int Apostas[], int NAps, FILE *arq); // Dá as cartas e armazena as apostas de cada jogador
int Mortos(Jogador *J, int N);                                                                   // Verifica se apenas um jogador está vivo
void ImprimeCartas(Jogador *J, int N, int POS, FILE *arq);                                       // Imprime as cartas de um jogador
void TrocarPe(Jogador *J, int N);                                                                // Muda o jogador que irá iniciar a rodada (o segundo jogador da ultima rodada se torna o primeiro)
void CompararBets(Jogador *J, int N, int Apostas[], int NAps, FILE *arq);                        // Compara a quantidade de rodadas vencidas pelos jogadores com seus palpites
int NumCartasTurno(int Turno);                                                                   // Retorna a quantidade de cartas no turno
void Rodada(Pilha *P, Jogador *J, int N, FILE *arq);                                             // Execuções de uma rodada
int Menu();                                                                                      // Visual do menu com as opções de iniciar ou sair do jogo
void Partida(Pilha *Baralho, Jogador *J, int N);                                                 // Todas as execuções de uma partida & Criação e gravação do arquivo .txt
char LetraC(int Num);                                                                            // Transformar os numeros 1,8,9,10 em letras (A, Q, J, K)
//
int main()
{
    int Vrfy;
    Pilha *Baralho;
    Jogador *J;
    int i, N, pos = 0;
    do
    {
        Vrfy = Menu();
        pos = 0;
        if (Vrfy == 1)
        {
            printf("\nIniciando...\n\n");
            N = QtdDeJgdr();
            Baralho = CriarPilha();
            J = (Jogador *)malloc(N * sizeof(Jogador));
            for (i = 0; i < N; i++)
            {
                printf("\n----------- Escreva o apelido do jogador %d -----------\n\n                        ", pos + 1);
                CriarJogador(J, N, pos);
                pos++;
                printf("\n                                                      \n\n");
            }
            CriarBaralho(Baralho);
            Partida(Baralho, J, N);
            free(Baralho);
        }
        else
        {
            printf("\n\nFechando...\n");
            free(Baralho);
            free(J);
            return 0;
        }
    } while (Vrfy == 1);
}
//
int Menu()
{
    int n;
    do
    {
        printf("*********BEM VINDO*********\n*                          *\n*  (1)INICIAR    (2)SAIR   *\n*                          *\n****************************\n\n\n");
        scanf("%d", &n);
    } while (n < 1 || n > 2);
    return n;
}
void Partida(Pilha *Baralho, Jogador *J, int N)
{
    FILE *arq;
    arq = fopen("Whoresson.txt", "w");
    if (arq == NULL)
    {
        printf("Nao foi possivel ler o arquivo\n");
        exit(1);
    }
    int i, Vrfy = 0, j, Apostas[8], n = N - 1, Turno = 1;
    fprintf(arq, "Naipes: 1 = COPAS, 2 = OUROS, 3 = PAUS, 4 = ESPADAS\n\nCARTAS -> NAIPE - NUMERO/LETRA\n\n");
    fprintf(arq, "\n\n\n\n------------------------------------------------------------------------------------------\n");
    while (Vrfy != 1 || Vrfy != 2)
    {
        printf("\n\n\n             *****  RODADA %d  *****\n", Turno);
        fprintf(arq, "Rodada -> %d\n", Turno);
        Embaralhar(Baralho);
        MaosBets(Baralho, J, N, Turno, Apostas, N, arq);
        printf("\n\n\n\n------------------------------------------------------------------------------------------\n");
        while (J[n].Mao.fim != 0)
        {
            printf("\n\n\n");
            Rodada(Baralho, J, N, arq);
            if (Mortos(J, N) == 1)
            {
                break;
            }
        }
        CompararBets(J, N, Apostas, N, arq);
        printf("\n\n---------------------------------------------------------------------------\n");
        TrocarPe(J, N);
        Vrfy = Mortos(J, N);
        if (Vrfy == 2)
        {
            for (i = 0; i < N; i++)
            {
                if (J[i].Vidas > 0)
                {
                    printf("\n O Jogador %s esta vivo com %d vidas  :) ", J[i].Nome, J[i].Vidas);
                    fprintf(arq, "\nJogador %s esta vivo com %d vidas\n", J[i].Nome, J[i].Vidas);
                }
                else
                {
                    printf("\n\n O Jogador %s esta morto     ;-; \n", J[i].Nome);
                    fprintf(arq, "\nJogador %s esta morto\n", J[i].Nome);
                }
            }
            printf("\n\n\n          |       NAO TEVE VENCEDORES       |\n\n\n---------------------------------------------------------------------------\n\n\n", J[j].Nome, J[j].Vidas);
            fprintf(arq, "\nNAO TEVE VENCEDORES\n");
        }
        else if (Vrfy == 1)
        {
            for (i = 0; i < N; i++)
            {
                if (J[i].Vidas > 0)
                {
                    printf("\n O Jogador %s esta vivo com %d vidas  :) ", J[i].Nome, J[i].Vidas);
                    fprintf(arq, "\nJogador %s esta vivo com %d vidas\n", J[i].Nome, J[i].Vidas);
                    j = i;
                }
                else
                {
                    printf("\n O Jogador %s esta morto     ;-; ", J[i].Nome);
                    fprintf(arq, "\nJogador %s esta morto\n", J[i].Nome);
                }
            }
            printf("\n\n\n          |       O JOGADOR %s VENCEU COM %d VIDAS RESTANTES    |\n\n\n---------------------------------------------------------------------------\n\n\n", J[j].Nome, J[j].Vidas);
            fprintf(arq, "\nJogador %s VENCEU\n", J[j].Nome);
        }
        else
        {
            for (i = 0; i < N; i++)
            {
                if (J[i].Vidas > 0)
                {
                    printf("\n O Jogador %s esta vivo com %d vidas  :) ", J[i].Nome, J[i].Vidas);
                    fprintf(arq, "\nJogador %s esta vivo com %d vidas\n", J[i].Nome, J[i].Vidas);
                }
                else
                {
                    printf("\n\n O Jogador %s esta morto     ;-; \n", J[i].Nome);
                    fprintf(arq, "\nJogador %s esta morto\n", J[i].Nome);
                }
            }
        }

        Turno++;
    }
    fclose(arq);
}
Pilha *CriarPilha()
{
    Pilha *P;
    P = (Pilha *)malloc(sizeof(Pilha));
    P->Topo = 0;
    return P;
}
int EmpilhaCarta(Pilha *P, Carta X)
{
    if (PilhaCh(P, 40) == 1)
    {
        return 0;
    }
    else
    {
        P->Vet[P->Topo] = X;
        P->Topo++;
        return 1;
    }
}
int EmPilhaInicio(Pilha *P, int Naipe, int Numero, int Poder, int Codigo)
{
    if (PilhaCh(P, 40) == 1)
    {
        return 0;
    }
    else
    {
        P->Vet[P->Topo].Naipe = Naipe;
        P->Vet[P->Topo].Numero = Numero;
        P->Vet[P->Topo].Poder = Poder;
        P->Vet[P->Topo].Codigo = Codigo;
        P->Topo++;
        return 1;
    }
}
int DesemPilha(Pilha *P, Carta *N)
{
    if (PilhaVaz(P) == 1)
    {
        return 0;
    }
    else
    {
        *N = P->Vet[P->Topo - 1];
        P->Topo--;
        return 1;
    }
}
int PilhaCh(Pilha *P, int Max)
{
    if (P->Topo == Max)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
int PilhaVaz(Pilha *P)
{
    if (P->Topo == 0)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
Fila *CriarFila()
{
    Fila *F;
    F = (Fila *)malloc(sizeof(Fila));
    F->Fim = 0;
    F->Inicio = 0;
    F->Tamanho = 0;
    return F;
}
int Enfileira(Fila *F, Jogador J)
{
    if (FilaCh(F) == 1)
    {
        return 0;
    }
    else
    {
        F->Fim = F->Fim % MAX;
        F->Vet[F->Fim] = J;
        F->Fim++;
        F->Tamanho++;
        return 1;
    }
}
int Desenfil(Fila *F, Jogador *Aux)
{
    int V;
    V = FilaVaz(F);
    if (V == 1)
    {
        return 0;
    }
    else
    {
        F->Inicio = F->Inicio % MAX;
        *Aux = F->Vet[F->Inicio];
        F->Inicio++;
        F->Tamanho--;
        return 1;
    }
}
int RemoverPOS(Jogador *J, int N, int POS, Carta *X, int Ind)
{
    int i, x = Ind + 1;
    *X = J[POS].Mao.vet[Ind];
    if (Ind >= 0 && Ind < J[POS].Mao.fim)
    {
        for (i = Ind; i < J[POS].Mao.fim; i++)
        {
            J[POS].Mao.vet[i] = J[POS].Mao.vet[x];
            x++;
        }
        J[POS].Mao.fim--;
        return 1;
    }
    else
    {
        printf("Escreva novamente\n");
        return 0;
    }
}
int ListaVAZ(Lista L)
{
    if (L.fim == 0)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
int FilaCh(Fila *F)
{
    if (F->Tamanho == 8)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
int FilaVaz(Fila *F)
{
    if (F->Tamanho == 0)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
int QtdDeJgdr()
{
    int Qtd = 1;
    while (Qtd > 8 || Qtd < 2)
    {
        printf("\n\nDigite a quantidade de jogadores (Minimo 2 e Maximo 8)\n\n                        ");
        scanf("%d", &Qtd);
        printf("\n\n");
    }
    return Qtd;
}
void CriarJogador(Jogador *J, int N, int POS)
{
    setbuf(stdin, NULL);
    gets(J[POS].Nome);
    J[POS].Pos = POS;
    J[POS].RoundsV = 0;
    J[POS].Vidas = 5;
    J[POS].Mao.fim = 0;
}
void CriarBaralho(Pilha *P)
{
    int x;
    int Poder[40] = {31, 35, 39, 3, 7, 11, 70, 19, 23, 27, 60, 34, 38, 2, 6, 10, 14, 18, 22, 26, 32, 36, 40, 80, 8, 12, 16, 20, 24, 28, 29, 33, 37, 1, 5, 9, 50, 17, 21, 25};
    int Naipe[40] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4}, i;
    for (i = 0; i < 40; i++)
    {
        x = i;
        EmPilhaInicio(P, Naipe[i], x % 10 + 1, Poder[i], i);
    }
}
void Embaralhar(Pilha *P)
{
    int i, j;
    Carta aux;
    srand(time(NULL));
    for (i = 0; i < 40; i++)
    {
        j = rand() % 40;
        aux = P->Vet[i];
        P->Vet[i] = P->Vet[j];
        P->Vet[j] = aux;
    }
}
void CriarMao(Pilha *P, Jogador *J, int QtdJog, int NumCartas, int POS)
{
    int j, Vrfy;
    Carta X;
    for (j = 0; j < NumCartas; j++)
    {
        Vrfy = DesemPilha(P, &X);
        if (J[POS].Mao.fim == 5)
        {
            printf(".");
        }
        else
        {
            J[POS].Mao.vet[J[POS].Mao.fim] = X;
            J[POS].Mao.fim++;
        }
    }
}
void MaosBets(Pilha *Baralho, Jogador *J, int N, int Turno, int Apostas[], int NAps, FILE *arq)
{
    int NumCartas, i, j, add, resto;
    NumCartas = NumCartasTurno(Turno);
    resto = NumCartas;
    for (i = 0; i < N; i++)
    {
        if (J[i].Vidas > 0)
        {
            if (i == N - 1)
            {
                add = -9;
                CriarMao(Baralho, J, N, NumCartas, i);
                printf("\nTurno do jogador %s\nSuas cartas sao:\n", J[i].Nome);
                fprintf(arq, "\nTurno do jogador %s\nSuas cartas sao\n", J[i].Nome);
                ImprimeCartas(J, N, i, arq);
                if (resto < 0)
                {
                    while (add > NumCartas || add < 0 || add == resto)
                    {
                        printf("\nVoce podera vencer quantas rodadas quiser, quantas ira fazer?              ");
                        scanf("%d", &add);
                        fprintf(arq, "\nAposta do jogador %s = %d rodadas", J[i].Nome, add);
                        Apostas[i] = add;
                    }
                }
                else
                {
                    while (add > NumCartas || add < 0 || add == resto)
                    {
                        printf("\nVoce nao podera vencer exatamente | %d |, quantas voce consegue fazer das %d cartas?            \n", resto, NumCartas);
                        scanf("%d", &add);
                        fprintf(arq, "\nAposta do jogador %s = %d rodadas", J[i].Nome, add);
                        Apostas[i] = add;
                    }
                }
            }
            else
            {
                add = -9;
                CriarMao(Baralho, J, N, NumCartas, i);
                printf("\nTurno do jogador %s\nSuas cartas sao:\n", J[i].Nome);
                ImprimeCartas(J, N, i, arq);
                while (add > NumCartas || add < 0)
                {
                    printf("\nQuantas voce consegue fazer das %d cartas?                  ", NumCartas);
                    scanf("%d", &add);
                    fprintf(arq, "\nAposta do jogador %s = %d rodadas", J[i].Nome, add);
                    Apostas[i] = add;
                }
                resto -= add;
            }
        }
    }
}
void ImprimeCartas(Jogador *J, int N, int POS, FILE *arq)
{
    int j, i = 1;
    for (j = 0; j < J[POS].Mao.fim; j++)
    {
        printf("(%d) %c", i, J[POS].Mao.vet[j].Naipe + 2);
        fprintf(arq, "(%d) %d", i, J[POS].Mao.vet[j].Naipe);
        if (J[POS].Mao.vet[j].Numero == 8)
        {
            printf(" - Q\n");
            fprintf(arq, " - Q\n");
        }
        else if (J[POS].Mao.vet[j].Numero == 9)
        {
            printf(" - J\n");
            fprintf(arq, " - J\n");
        }
        else if (J[POS].Mao.vet[j].Numero == 10)
        {
            printf(" - K\n");
            fprintf(arq, " - K\n");
        }
        else if (J[POS].Mao.vet[j].Numero == 1)
        {
            printf(" - A\n");
            fprintf(arq, " - A\n");
        }
        else
        {
            printf(" - %d\n", J[POS].Mao.vet[j].Numero);
            fprintf(arq, " - %d\n", J[POS].Mao.vet[j].Numero);
        }
        i++;
    }
}
void CompararBets(Jogador *J, int N, int Apostas[], int NAps, FILE *arq)
{
    int i, r;
    for (i = 0; i < N; i++)
    {
        if (J[i].Vidas > 1)
        {
            r = Apostas[i] - J[i].RoundsV;
            if (r == 1 || r == -1)
            {
                printf("\n    O jogador %s perdeu 1 vida | %d turnos vencidos | Aposta era %d |    \n", J[i].Nome, J[i].RoundsV, Apostas[i]);
                fprintf(arq, "\nJogador %s perdeu 1 vida |%d turnos vencidos|Aposta era %d|\n", J[i].Nome, J[i].RoundsV, Apostas[i]);
                J[i].Vidas--;
                J[i].RoundsV = 0;
            }
            else if (r > 1 || r < -1)
            {
                printf("\n    O jogador %s perdeu 2 vidas  | %d turnos vencidos | Aposta era %d |    \n", J[i].Nome, J[i].RoundsV, Apostas[i]);
                fprintf(arq, "\nJogador %s perdeu 2 vida |%d turnos vencidos|Aposta era %d|\n", J[i].Nome, J[i].RoundsV, Apostas[i]);
                J[i].Vidas -= 2;
                J[i].RoundsV = 0;
            }
            else if (r == 0)
            {
                printf("\n    O jogador %s acertou sua aposta | %d turnos vencidos | Aposta era %d |    \n", J[i].Nome, J[i].RoundsV, Apostas[i]);
                fprintf(arq, "\nJogador %s acertou sua aposta |%d turnos vencidos|Aposta era %d|\n", J[i].Nome, J[i].RoundsV, Apostas[i]);
                J[i].RoundsV = 0;
            }
        }
    }
}
int Mortos(Jogador *J, int N)
{
    int cont = 0, i, n = N - 1;
    if (N == 2)
    {
        if (J[0].Vidas == 0 || J[1].Vidas == 0)
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
    else
    {
        for (i = 0; i < N; i++)
        {
            if (J[i].Vidas == 0)
            {
                cont++;
            }
        }
        if (cont == n)
        {
            return 1;
        }
        else if (cont == N)
        {
            return 2;
        }
        else
        {
            return 0;
        }
    }
}
int NumCartasTurno(int Turno)
{
    Turno = Turno % 10;
    switch (Turno)
    {
    case 0:
        return 4;
        break;
    case 1:
        return 5;
        break;
    case 2:
        return 4;
        break;
    case 3:
        return 3;
        break;
    case 4:
        return 2;
        break;
    case 5:
        return 1;
        break;
    case 6:
        return 2;
        break;
    case 7:
        return 3;
        break;
    case 8:
        return 4;
        break;
    case 9:
        return 5;
        break;
    default:
        break;
    }
}
void TrocarPe(Jogador *J, int N)
{
    Fila *F = CriarFila();
    Jogador Aux;
    int i, vrfy;
    for (i = 0; i < N; i++)
    {
        vrfy = Enfileira(F, J[i]);
    }
    vrfy = Desenfil(F, &Aux);
    vrfy = Enfileira(F, Aux);
    for (i = 0; i < N; i++)
    {
        vrfy = Desenfil(F, &J[i]);
    }
    free(F);
}
char LetraC(int Num)
{
    if (Num == 8)
    {
        return 'Q';
    }
    else if (Num == 9)
    {
        return 'J';
    }
    else if (Num == 10)
    {
        return 'K';
    }
    else if (Num == 1)
    {
        return 'A';
    }
    else
        return Num;
}
void Rodada(Pilha *P, Jogador *J, int N, FILE *arq)
{
    int i, j, Ind, Vrfy;
    Carta *Monte;
    char Letra;
    Monte = (Carta *)malloc(N * sizeof(Carta));
    for (i = 0; i < N; i++)
    {
        if (J[i].Vidas > 0)
        {
            printf("\nTurno do jogador %s\nSuas cartas sao:\n", J[i].Nome);
            fprintf(arq, "\nTurno do jogador %s\nSuas cartas sao:\n", J[i].Nome);
            ImprimeCartas(J, N, i, arq);
            do
            {
                printf("\nEscolha uma carta para jogar\n\n                 ");
                scanf("%d", &Ind);
            } while (Ind < 0 || Ind > J[i].Mao.fim);
            Ind--;
            if (J[i].Mao.vet[Ind].Numero > 7 || J[i].Mao.vet[Ind].Numero == 1)
            {
                Letra = LetraC(J[i].Mao.vet[Ind].Numero);
                printf("\n                       ****** A carta |  %c  %c  | foi jogada ******\n\n", J[i].Mao.vet[Ind].Naipe + 2, Letra);
            }
            else
            {
                printf("\n                       ****** A carta |  %c  %d  | foi jogada ******\n\n", J[i].Mao.vet[Ind].Naipe + 2, J[i].Mao.vet[Ind].Numero);
            }
            fprintf(arq, "\nCarta %d - %d jogada\n", J[i].Mao.vet[Ind].Naipe, J[i].Mao.vet[Ind].Numero);
            Vrfy = RemoverPOS(J, N, i, &Monte[i], Ind);
            if (Vrfy == 0)
            {
                printf("Erro\n");
            }
            Vrfy = EmpilhaCarta(P, Monte[i]);
            if (Vrfy == 0)
            {
                printf("Erro\n");
            }
        }
    }
    j = 0;
    for (i = 1; i < N; i++)
    {
        if (Monte[j].Poder > Monte[i].Poder)
        {
            Ind = i;
            j++;
        }
        else
        {
            Ind = j;
            j++;
        }
    }
    if (Monte[Ind].Numero > 7 || Monte[Ind].Numero == 1)
    {
        Letra = LetraC(Monte[Ind].Numero);
        printf("---------------------------------------------------------------------------\n\n   A Carta|  %c  %c  |foi a maior\n\n    O jogador %s venceu o turno\n\n---------------------------------------------------------------------------\n", Monte[Ind].Naipe + 2, Letra, J[Ind].Nome);
        fprintf(arq, "\nCarta %c %d foi a maior -> O jogador %s venceu o turno\n", Monte[Ind].Naipe, Letra, J[Ind].Nome);
    }
    else
    {
        printf("---------------------------------------------------------------------------\n\n    A Carta|  %c  %d  |foi a maior\n\n    O jogador %s venceu o turno\n\n---------------------------------------------------------------------------", Monte[Ind].Naipe + 2, Monte[Ind].Numero, J[Ind].Nome);
        fprintf(arq, "\nCarta %d %d foi a maior -> O jogador %s venceu o turno\n", Monte[Ind].Naipe, Monte[Ind].Numero, J[Ind].Nome);
    }
    J[Ind].RoundsV++;
}
