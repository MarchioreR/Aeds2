#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
//
typedef struct Carta
{
    int Naipe;
    int Numero;
    int Poder;
    int Codigo;
} Carta;
//
typedef struct Lista
{
    int fim;
    Carta vet[5];
} Lista;
//
typedef struct Jogador
{
    char Nome[20];
    Lista Mao;
    int Vidas;
    int RoundsV;
    int Pos;
} Jogador;
//
typedef struct Elemento
{
    Jogador Val;
    struct Elemento *Prox;
} Elemento;
//
typedef struct Fila
{
    Elemento *Inicio;
    Elemento *Fim;
} Fila;
//
typedef struct Pilha
{
    Carta Vet[40];
    int Topo;
} Pilha;

//----------------------------------------------------------] FUNÇÔES DA FILA [
Fila *CriarFila();
void LiberarFila(Fila *F);
int Enfileirar(Fila *F, Jogador N);
int Desenfileirar(Fila *F, Jogador *N);
int FilaCh(Elemento *Novo);
int FilaVaz(Elemento *Novo);

//----------------------------------------------------------] FUNÇÔES DA PILHA [
Pilha *CriarPilha(); // O baralho do jogo é uma pilha
int PilhaVaz(Pilha *P);
int PilhaCh(Pilha *P, int Max);
int DesemPilha(Pilha *P, Carta *N);
int EmPilhaInicio(Pilha *P, int Naipe, int Numero, int Poder, int Codigo);
int EmpilhaCarta(Pilha *P, Carta X);

//----------------------------------------------------------] FUNÇÔES DA LISTA [
int RemoverPOS(Jogador *J, int N, int POS, Carta *X, int Ind); // Remover uma carta da mão
int ListaVAZ(Lista L);

//----------------------------------------------------------] FUNÇÔES BASICAS DO JOGO [
int QtdDeJgdr();                                                         // Obtem a quantidade de jogadores
void CriarJogador(Jogador *J, int N, int POS);                           // Cria os jogadores
void CriarBaralho(Pilha *P);                                             // Cria as 40 cartas e as empilha no baralho
void Embaralhar(Pilha *P);                                               // Embaralha
void CriarMao(Pilha *P, Jogador *J, int QtdJog, int NumCartas, int POS); // Função que está dentro da "MaosBets" que entrega as cartas para um jogador

//----------------------------------------------------------] FUNÇÔES QUE IMPRIMEM [
int Menu();                                                                           // Visual do menu com as opções de iniciar ou sair do jogo
void MaosBets(Pilha *Baralho, Jogador *J, int N, int Turno, int *Apostas, FILE *arq); // Dá as cartas e armazena as apostas de cada jogador
void ImprimeCartas(Jogador *J, int N, int POS, FILE *arq);                            // Imprime as cartas de um jogador
int ImprimeVidas(Jogador *J, int N, FILE *arq, int Vrfy, int POS);                    // Imprime a situação do jogador
void CompararBets(Jogador *J, int N, int *Apostas, FILE *arq);                        // Compara a quantidade de turnos vencidos com as apostas e então imprime o resultado

//----------------------------------------------------------] FUNÇÔES COM OPERAÇÕES OU QUE RETORNAM ALGO [
int Mortos(Jogador *J, int N);      // Retorna 1 se só existir um jogador vivo, 2 se todos morrerem ou 0 se nenhuma destas opções forem verdadeiras
int NumCartasTurno(int Turno);      // Retorna a quantidade de cartas no turno
int TrocarPe(Jogador *J, int N);    // Muda o jogador que irá iniciar a rodada (o segundo jogador da ultima rodada se torna o primeiro)
char Num_Letra(int Num);            // Transformar os numeros 1, 8, 9, 10 em letras (A, Q, J, K)
int MaisForte(Carta *Monte, int N); // Verifica qual carta é a mais forte e retorna o índice do jogador que a jogou

//----------------------------------------------------------] FUNÇÕES PRINCIPAIS DO JOGO [
void Rodada(Pilha *P, Jogador *J, int N, FILE *arq); // Execuções de uma rodada
int Partida(Pilha *Baralho, Jogador *J, int N);      // Todas as execuções de uma partida & Criação e gravação do arquivo .txt
//
int main()
{
    int Vrfy, i, N, pos = 0;
    Pilha *Baralho;
    Jogador *J;

    Vrfy = Menu();

    if (Vrfy == 1)
    {
        printf("\nIniciando...\n\n");
        N = QtdDeJgdr();
        Baralho = CriarPilha();
        J = (Jogador *)malloc(N * sizeof(Jogador));
        for (i = 0; i < N; i++)
        {
            printf("\n----------- Escreva o apelido do jogador %d -----------\n\n                        ", pos + 1);
            CriarJogador(J, N, pos);
            pos++;
            printf("\n                                                      \n\n");
        }
        CriarBaralho(Baralho);
        Vrfy = Partida(Baralho, J, N);
        free(J);
        free(Baralho);
        printf("\n\n\n\nFechando...\n");
        scanf("%d", &Vrfy);
        return 0;
    }
    else
    {
        printf("\n\nFechando...\n");
        free(J);
        free(Baralho);
        return 0;
    }
}
//
int Menu()
{
    int n;
    do
    {
        printf("*********BEM VINDO*********\n*                          *\n*  (1)INICIAR    (2)SAIR   *\n*                          *\n****************************\n\n\n");
        scanf("%d", &n);
    } while (n < 1 || n > 2);
    return n;
}
//
Pilha *CriarPilha()
{
    Pilha *P;
    P = (Pilha *)malloc(sizeof(Pilha));
    P->Topo = 0;
    return P;
}
int EmpilhaCarta(Pilha *P, Carta X)
{
    if (PilhaCh(P, 40) == 1)
    {
        return 0;
    }
    else
    {
        P->Vet[P->Topo] = X;
        P->Topo++;
        return 1;
    }
}
int EmPilhaInicio(Pilha *P, int Naipe, int Numero, int Poder, int Codigo)
{
    if (PilhaCh(P, 40) == 1)
    {
        return 0;
    }
    else
    {
        P->Vet[P->Topo].Naipe = Naipe;
        P->Vet[P->Topo].Numero = Numero;
        P->Vet[P->Topo].Poder = Poder;
        P->Vet[P->Topo].Codigo = Codigo;
        P->Topo++;
        return 1;
    }
}
int DesemPilha(Pilha *P, Carta *N)
{
    if (PilhaVaz(P) == 1)
    {
        return 0;
    }
    else
    {
        *N = P->Vet[P->Topo - 1];
        P->Topo--;
        return 1;
    }
}
int PilhaCh(Pilha *P, int Max)
{
    if (P->Topo == Max)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
int PilhaVaz(Pilha *P)
{
    if (P->Topo == 0)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
//
Fila *CriarFila()
{
    Fila *F;
    F = (Fila *)malloc(sizeof(Fila));
    F->Fim = NULL;
    F->Inicio = NULL;
    return F;
}
void LiberarFila(Fila *F)
{
    if (FilaVaz(F->Inicio) == 1)
    {
        printf("\n");
    }
    else
    {
        Elemento *Aux;
        while (F->Fim != NULL)
        {
            Aux = F->Fim->Prox;
            F->Fim = Aux;
            free(Aux);
        }
        free(F);
    }
}
int Enfileirar(Fila *F, Jogador N)
{
    Elemento *Novo;
    Novo = (Elemento *)malloc(sizeof(Elemento));
    if (F->Inicio == NULL)
    {
        Novo->Prox = NULL;
        Novo->Val = N;
        F->Inicio = Novo;
        F->Fim = Novo;
    }
    else
    {
        if (FilaCh(F->Fim) == 1)
        {
            Novo->Val = N;
            Novo->Prox = NULL;
            F->Fim->Prox = Novo;
            F->Fim = Novo;
            return 1;
        }
        else
        {
            return 0;
        }
    }
}
int Desenfileirar(Fila *F, Jogador *N)
{
    if (FilaVaz(F->Inicio) == 0)
    {
        Elemento *Aux;
        Aux = F->Inicio;
        *N = F->Inicio->Val;
        F->Inicio = F->Inicio->Prox;
        free(Aux);
        return 1;
    }
    else
    {
        return 0;
    }
}
int FilaCh(Elemento *Novo)
{
    if (Novo != NULL)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
int FilaVaz(Elemento *Novo)
{
    if (Novo == NULL)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
//
int RemoverPOS(Jogador *J, int N, int POS, Carta *X, int Ind)
{
    int i, x = Ind + 1;
    *X = J[POS].Mao.vet[Ind];
    if (Ind >= 0 && Ind < J[POS].Mao.fim)
    {
        for (i = Ind; i < J[POS].Mao.fim; i++)
        {
            J[POS].Mao.vet[i] = J[POS].Mao.vet[x];
            x++;
        }
        J[POS].Mao.fim--;
        return 1;
    }
    else
    {
        printf("Escreva novamente\n");
        return 0;
    }
}
int ListaVAZ(Lista L)
{
    if (L.fim == 0)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
//
int QtdDeJgdr() // Pergunta ao usuário a quantidade de jogadores na partida
{
    int Qtd = 1;
    while (Qtd > 8 || Qtd < 2)
    {
        printf("\n\nDigite a quantidade de jogadores (Minimo 2 e Maximo 8)\n\n                        ");
        scanf("%d", &Qtd);
        printf("\n\n");
    }
    return Qtd;
}
void CriarJogador(Jogador *J, int N, int POS)
{
    setbuf(stdin, NULL);
    gets(J[POS].Nome);
    J[POS].Pos = POS;
    J[POS].RoundsV = 0;
    J[POS].Vidas = 5;
    J[POS].Mao.fim = 0;
}
void CriarBaralho(Pilha *P)
{
    int x;
    int Poder[40] = {31, 35, 39, 3, 7, 11, 70, 19, 23, 27, 29, 33, 37, 1, 5, 9, 50, 17, 21, 25, 32, 36, 40, 80, 8, 12, 16, 20, 24, 28, 60, 34, 38, 2, 6, 10, 14, 18, 22, 26};
    int Naipe[40] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4}, i;
    for (i = 0; i < 40; i++)
    {
        x = i;
        EmPilhaInicio(P, Naipe[i], x % 10 + 1, Poder[i], i);
    }
}
void Embaralhar(Pilha *P) // Embaralha a Pilha ( Baralho )
{
    int i, j;
    Carta aux;
    srand(time(NULL));
    for (i = 0; i < 40; i++)
    {
        j = rand() % 40;
        aux = P->Vet[i];
        P->Vet[i] = P->Vet[j];
        P->Vet[j] = aux;
    }
}
void CriarMao(Pilha *P, Jogador *J, int QtdJog, int NumCartas, int POS) // Desempilha as cartas do baralho para a mão do jogador
{
    int j, Vrfy;
    Carta X;
    for (j = 0; j < NumCartas; j++)
    {
        Vrfy = DesemPilha(P, &X);
        if (J[POS].Mao.fim == NumCartas)
        {
            printf("\n\n");
        }
        else
        {
            J[POS].Mao.vet[J[POS].Mao.fim] = X;
            J[POS].Mao.fim++;
        }
    }
}
//
void MaosBets(Pilha *Baralho, Jogador *J, int N, int Turno, int *Apostas, FILE *arq) // Guarda a aposta dos jogadores
{
    int NumCartas, i, j, add, resto;
    NumCartas = NumCartasTurno(Turno);
    resto = NumCartas;

    for (i = 0; i < N; i++)
    {
        if (i == N - 1)
        {
            add = -9;
            CriarMao(Baralho, J, N, NumCartas, i);
            printf("\nTURNO DO JOGADOR %s\n\nSuas cartas sao:\n\n", J[i].Nome);
            fprintf(arq, "\n\nTURNO DO JOGADOR %s\nSuas cartas sao\n\n", J[i].Nome);
            ImprimeCartas(J, N, i, arq);
            if (resto < 0)
            {
                while (add > NumCartas || add < 0 || add == resto)
                {
                    printf("\nVoce podera vencer quantas rodadas quiser, quantas ira fazer?              ");
                    scanf("%d", &add);
                    fprintf(arq, "\n\nAposta do jogador %s = %d rodadas\n\n", J[i].Nome, add);
                    Apostas[i] = add;
                }
            }
            else
            {
                while (add > NumCartas || add < 0 || add == resto)
                {
                    printf("\nVoce nao podera vencer exatamente | %d |, quantas voce consegue fazer das %d cartas?            ", resto, NumCartas);
                    scanf("%d", &add);
                    fprintf(arq, "\n\nAposta do jogador %s = %d rodadas\n\n", J[i].Nome, add);
                    Apostas[i] = add;
                }
            }
        }
        else
        {
            add = -9;
            CriarMao(Baralho, J, N, NumCartas, i);
            printf("\nTURNO DO JOGADOR %s\n\nSuas cartas sao:\n\n", J[i].Nome);
            fprintf(arq, "\n\nTURNO DO JOGADOR %s\nSuas cartas sao\n\n", J[i].Nome);
            ImprimeCartas(J, N, i, arq);

            while (add > NumCartas || add < 0)
            {
                printf("\nQuantas voce consegue fazer das %d cartas?                  ", NumCartas);
                scanf("%d", &add);
                fprintf(arq, "\n\nAposta do jogador %s = %d rodadas\n\n", J[i].Nome, add);
                Apostas[i] = add;
            }
            resto -= add;
        }
    }
}
void ImprimeCartas(Jogador *J, int N, int POS, FILE *arq) // Imprime a mão de um jogador
{
    int j, i = 1, num;
    char Letra;
    for (j = 0; j < J[POS].Mao.fim; j++)
    {
        printf("(%d) %c", i, J[POS].Mao.vet[j].Naipe + 2);
        fprintf(arq, "(%d) %d", i, J[POS].Mao.vet[j].Naipe);
        num = J[POS].Mao.vet[j].Numero;
        if (num == 1 || num > 7)
        {
            Letra = Num_Letra(num);
            printf(" - %c\n", Letra);
            fprintf(arq, " - %c\n", Letra);
        }
        else
        {
            printf(" - %d\n", num);
            fprintf(arq, " - %d\n", num);
        }
        i++;
    }
}
int ImprimeVidas(Jogador *J, int N, FILE *arq, int Vrfy, int POS) // Imprime a situação e as vidas de um jogador
{
    int j;
    if (Vrfy != 1)
    {
        if (J[POS].Vidas > 0)
        {
            printf("\n O Jogador %s esta vivo com %d vidas  :) \n", J[POS].Nome, J[POS].Vidas);
            fprintf(arq, "\nJogador %s esta vivo com %d vidas\n", J[POS].Nome, J[POS].Vidas);
        }
        else
        {
            printf("\n O Jogador %s esta morto     ;-; \n", J[POS].Nome);
            fprintf(arq, "\nJogador %s esta morto\n", J[POS].Nome);
        }
        return 0;
    }
    else
    {
        if (J[POS].Vidas > 0)
        {
            printf("\n O Jogador %s esta vivo com %d vidas  :) \n", J[POS].Nome, J[POS].Vidas);
            fprintf(arq, "\nJogador %s esta vivo com %d vidas\n", J[POS].Nome, J[POS].Vidas);
            j = POS;
        }
        else
        {
            printf("\n O Jogador %s esta morto     ;-; \n", J[POS].Nome);
            fprintf(arq, "\nJogador %s esta morto\n", J[POS].Nome);
        }
        return j;
    }
}
void CompararBets(Jogador *J, int N, int *Apostas, FILE *arq) // Compara a quantidade de turnos vencidos com a aposta feita/ Imprime o resultado desta comparação
{
    int i, r;
    for (i = 0; i < N; i++)
    {
        r = Apostas[i] - J[i].RoundsV;
        if (r == 1 || r == -1)
        {
            printf("\n    O jogador %s perdeu 1 vida  | %d turnos vencidos | Aposta era %d |    \n", J[i].Nome, J[i].RoundsV, Apostas[i]);
            fprintf(arq, "\nJogador %s perdeu 1 vida |%d turnos vencidos|Aposta era %d|\n", J[i].Nome, J[i].RoundsV, Apostas[i]);
            J[i].Vidas--;
            J[i].RoundsV = 0;
        }
        else if (r > 1 || r < -1)
        {
            printf("\n    O jogador %s perdeu 2 vidas | %d turnos vencidos | Aposta era %d |    \n", J[i].Nome, J[i].RoundsV, Apostas[i]);
            fprintf(arq, "\nJogador %s perdeu 2 vida |%d turnos vencidos|Aposta era %d|\n", J[i].Nome, J[i].RoundsV, Apostas[i]);
            J[i].Vidas -= 2;
            J[i].RoundsV = 0;
        }
        else if (r == 0)
        {
            printf("\n    O jogador %s acertou sua aposta | %d turnos vencidos | Aposta era %d |    \n", J[i].Nome, J[i].RoundsV, Apostas[i]);
            fprintf(arq, "\nJogador %s acertou sua aposta |%d turnos vencidos|Aposta era %d|\n", J[i].Nome, J[i].RoundsV, Apostas[i]);
            J[i].RoundsV = 0;
        }
    }
}
int Mortos(Jogador *J, int N)
{
    int i, n = N - 1, vivos = 0, morto = 0;

    for (i = 0; i < N; i++) // Conta a quantidade de vivos e mortos
    {
        if (J[i].Vidas > 0)
        {
            vivos++;
        }
        else
        {
            morto++;
        }
    }

    if (vivos == 1) // Se tiver apenas um jogador vivo a função retornará 1
    {
        return 1;
    }
    else if (morto == N) // Se todos estiverem mortos a função retornará 2
    {
        return 2;
    }
    else // Se existirem mais de um jogador vivo a função retorna 0
    {
        return 0;
    }
}
int NumCartasTurno(int Turno) // Retorna a quantidade de cartas no turno
{
    Turno = Turno % 10;
    switch (Turno)
    {
    case 0:
        return 4;
        break;
    case 1:
        return 5;
        break;
    case 2:
        return 4;
        break;
    case 3:
        return 3;
        break;
    case 4:
        return 2;
        break;
    case 5:
        return 1;
        break;
    case 6:
        return 2;
        break;
    case 7:
        return 3;
        break;
    case 8:
        return 4;
        break;
    case 9:
        return 5;
        break;
    default:
        break;
    }
}
int TrocarPe(Jogador *J, int N)
{
    Fila *F = CriarFila();
    Jogador Aux;
    int i, vrfy, vivos = 0;

    for (i = 0; i < N; i++) // Conta e enfileira os jogadores que ainda estão vivos
    {
        if (J[i].Vidas > 0)
        {
            vrfy = Enfileirar(F, J[i]);
            vivos++;
        }
    }

    vrfy = Desenfileirar(F, &Aux); // Desenfileira e guarda o primeiro jogador da fila na variável "Aux"
    vrfy = Enfileirar(F, Aux);     // Posiciona ele no fim

    N = vivos; // Atualiza o numero de jogadores vivos

    for (i = 0; i < N; i++)
    {
        vrfy = Desenfileirar(F, &J[i]); // Desenfileira os membros da fila colocando-os em ordem no ponteiro "J", desta vez com o primeiro sendo o último a jogar
    }

    LiberarFila(F);
    return N;
}
char Num_Letra(int Num) // Retorna uma letra caso o numero da carta seja 1, 8, 9 ou 10, sendo respetivamente A, Q, J e K
{
    if (Num == 8)
    {
        return 'Q';
    }
    else if (Num == 9)
    {
        return 'J';
    }
    else if (Num == 10)
    {
        return 'K';
    }
    else if (Num == 1)
    {
        return 'A';
    }
    else
        return Num;
}
int MaisForte(Carta *Monte, int N) // Verifica qual carta é a mais forte e retorna o índice do jogador que a jogou
{
    int Ind, i;
    for (i = 0; i < N; i++)
    {
        if (i == 0)
        {
            Ind = i;
        }
        if (Monte[i].Poder > Monte[Ind].Poder)
        {
            Ind = i;
        }
    }
    return Ind;
}
//
void Rodada(Pilha *P, Jogador *J, int N, FILE *arq)
{
    int i, cont = 0, Ind, Vrfy;
    Carta *Monte;
    char Letra;
    Monte = (Carta *)malloc(N * sizeof(Carta));
    for (i = 0; i < N; i++)
    {
        printf("\nTURNO DO JOGADOR %s\n\nSuas cartas sao:\n\n", J[i].Nome);
        fprintf(arq, "\nTURNO DO JOGADOR %s\n\nSuas cartas sao:\n\n", J[i].Nome);
        ImprimeCartas(J, N, i, arq);
        do
        {
            printf("\nEscolha uma carta para jogar\n\n                 ");
            scanf("%d", &Ind);
        } while (Ind < 0 || Ind > J[i].Mao.fim);
        Ind--;
        if (J[i].Mao.vet[Ind].Numero > 7 || J[i].Mao.vet[Ind].Numero == 1)
        {
            Letra = Num_Letra(J[i].Mao.vet[Ind].Numero);
            printf("\n                       ****** A carta |  %c  %c  | foi jogada ******\n\n", J[i].Mao.vet[Ind].Naipe + 2, Letra);
            fprintf(arq, "\n\n||Carta | %d - %c | foi jogada||\n\n", J[i].Mao.vet[Ind].Naipe, Letra);
        }
        else
        {
            printf("\n                       ****** A carta |  %c  %d  | foi jogada ******\n\n", J[i].Mao.vet[Ind].Naipe + 2, J[i].Mao.vet[Ind].Numero);
            fprintf(arq, "\n\n||Carta | %d - %d | foi jogada||\n\n", J[i].Mao.vet[Ind].Naipe, J[i].Mao.vet[Ind].Numero);
        }
        Vrfy = RemoverPOS(J, N, i, &Monte[i], Ind);
        Vrfy = EmpilhaCarta(P, Monte[i]);

        fprintf(arq, "\n\n---------------------------------\n\n\n");
    }
    Ind = MaisForte(Monte, N);
    if (Monte[Ind].Numero > 7 || Monte[Ind].Numero == 1)
    {
        Letra = Num_Letra(Monte[Ind].Numero);
        printf("---------------------------------------------------------------------------\n\n   A Carta|  %c  %c  |foi a maior\n\n    O jogador %s venceu o turno\n\n---------------------------------------------------------------------------\n", Monte[Ind].Naipe + 2, Letra, J[Ind].Nome);
        fprintf(arq, "\n\nCarta | %d - %d | foi a maior -> O jogador %s venceu o turno\n\n", Monte[Ind].Naipe, Monte[Ind].Numero, J[Ind].Nome);
    }
    else
    {
        printf("---------------------------------------------------------------------------\n\n    A Carta|  %c  %d  |foi a maior\n\n    O jogador %s venceu o turno\n\n---------------------------------------------------------------------------", Monte[Ind].Naipe + 2, Monte[Ind].Numero, J[Ind].Nome);
        fprintf(arq, "\n\nCarta | %d - %d | foi a maior -> O jogador %s venceu o turno\n\n", Monte[Ind].Naipe, Monte[Ind].Numero, J[Ind].Nome);
    }
    printf("---------------------------------------------------------------------------\n\n");
    fprintf(arq, "---------------------------------------------------------------------------\n\n");
    J[Ind].RoundsV++;
}
int Partida(Pilha *Baralho, Jogador *J, int N)
{
    int i, Vrfy = 0, j, *Apostas, n = N - 1, Turno = 1;
    Apostas = (int *)malloc(N * sizeof(int));
    FILE *arq;

    arq = fopen("Whoresson.txt", "w");
    if (arq == NULL)
    {
        printf("Nao foi possivel ler o arquivo\n");
        exit(1);
    }

    fprintf(arq, "\n\nAs cartas serao mostradas desta forma : | NAIPE - NUMERO/LETRA |\n\n");
    fprintf(arq, "\n\n\n\n------------------------------------------------------------------------------------------\n");
    while (Vrfy != 1 || Vrfy != 2)
    {
        printf("\n\n\n             *****  RODADA (%d)  *****\n\n", Turno);
        fprintf(arq, "\n\n\n             *****  RODADA (%d)  *****\n\n", Turno);

        Embaralhar(Baralho);
        MaosBets(Baralho, J, N, Turno, Apostas, arq);

        printf("\n\n\n\n------------------------------------------------------------------------------------------\n");
        n = N - 1;

        while (J[n].Mao.fim != 0)
        {
            printf("\n\n\n");
            Rodada(Baralho, J, N, arq);
        }
        CompararBets(J, N, Apostas, arq); // Compara a aposta com a quantidade de rodadas vencidas pelo jogador e imprime quantas vidas perdeu ou se não perdeu

        printf("\n\n---------------------------------------------------------------------------\n");

        Vrfy = Mortos(J, N); // Verifica se alguem morreu e retorna 1 se alguém tiver vencido, 2 se houver empate e 0 se ainda há mais de um jogador vivo
        if (Vrfy == 2)       // OS ULTIMOS JOGADORES MORRERAM JUNTOS
        {
            for (i = 0; i < N; i++)
            {
                j = ImprimeVidas(J, N, arq, Vrfy, i); // POS
            }
            printf("\n\n\n          |       NAO HOUVERAM VENCEDORES       |\n\n\n---------------------------------------------------------------------------\n\n\n", J[j].Nome, J[j].Vidas);
            fprintf(arq, "\nNAO HOUVERAM VENCEDORES\n");
            fclose(arq);
            return 1;
        }
        else if (Vrfy == 1) // 1 VITORIOSO
        {
            printf("\n---------------------------------------------------------------------------\n\n");
            for (i = 0; i < N; i++)
            {
                j = ImprimeVidas(J, N, arq, Vrfy, i); // POS
            }
            if (J[j].Vidas == 1)
            {
                printf("\n---------------------------------------------------------------------------\n\n\n          |       O JOGADOR %s VENCEU COM 1 VIDA RESTANTE    |\n\n\n---------------------------------------------------------------------------\n\n\n", J[j].Nome);
            }
            else
            {
                printf("\n---------------------------------------------------------------------------\n\n\n          |       O JOGADOR %s VENCEU COM %d VIDAS RESTANTES    |\n\n\n---------------------------------------------------------------------------\n\n\n", J[j].Nome, J[j].Vidas);
            }
            fprintf(arq, "\n\n\n*************  Jogador %s VENCEU  *************\n", J[j].Nome);
            fclose(arq);
            return 1;
        }
        else // NADA ACONTECEU AINDA
        {
            for (i = 0; i < N; i++)
            {
                j = ImprimeVidas(J, N, arq, Vrfy, i); // POS
            }
            printf("\n\n---------------------------------------------------------------------------\n\n");
        }

        N = TrocarPe(J, N);
        Turno++;
    }
}
